generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  user_id       Int            @id @default(autoincrement())
  username      String
  password      String
  email         String
  phone_number  String
  role          UserRole
  wallet_amount Decimal        @db.Decimal(10, 2)
  created_date  DateTime       @default(now())
  modified_date DateTime       @updatedAt
  notifications Notification[]
  properties    PropertyInfo[]
  proposals     Proposal[]
  wishlists     Wishlist?

  @@unique([email, role], name: "emailRole")
}

model Wishlist {
  wishlist_id      Int                @id @default(autoincrement())
  user_id          Int                @unique
  created_date     DateTime           @default(now())
  tenant           UserInfo           @relation(fields: [user_id], references: [user_id])
  WishlistProperty WishlistProperty[]
  properties       PropertyInfo[]     @relation("PropertyInfoToWishlist")
}

model PropertyInfo {
  property_id      Int                @id @default(autoincrement())
  owner_id         Int
  address          String
  image            Bytes?
  description      String
  occupant_num     Int
  rental_fee       Decimal            @db.Decimal(10, 2)
  start_date       DateTime           @db.Date
  end_date         DateTime           @db.Date
  status           PropertyStatus
  created_date     DateTime           @default(now())
  modified_date    DateTime           @updatedAt
  owner            UserInfo           @relation(fields: [owner_id], references: [user_id])
  proposals        Proposal[]
  WishlistProperty WishlistProperty[]
  wishlists        Wishlist[]         @relation("PropertyInfoToWishlist")
}

model WishlistProperty {
  wishlist_id  Int
  property_id  Int
  created_date DateTime     @default(now())
  property     PropertyInfo @relation(fields: [property_id], references: [property_id])
  wishlist     Wishlist     @relation(fields: [wishlist_id], references: [wishlist_id])

  @@unique([wishlist_id, property_id])
}

model Proposal {
  proposal_id   Int            @id @default(autoincrement())
  tenant_id     Int
  property_id   Int
  status        ProposalStatus
  created_date  DateTime       @default(now())
  modified_date DateTime       @updatedAt
  agreements    Agreement[]
  property      PropertyInfo   @relation(fields: [property_id], references: [property_id])
  tenant        UserInfo       @relation(fields: [tenant_id], references: [user_id])
}

model Agreement {
  agreement_id       Int              @id @default(autoincrement())
  proposal_id        Int
  content            String
  deposit            Decimal          @db.Decimal(10, 2)
  deposit_status     DepositStatus
  init_rental_fee    Decimal          @db.Decimal(10, 2)
  initial_fee_status InitialFeeStatus
  tenant_signature   Boolean
  owner_signature    Boolean
  agreement_status   AgreementStatus
  created_date       DateTime         @default(now())
  modified_date      DateTime         @updatedAt
  proposal           Proposal         @relation(fields: [proposal_id], references: [proposal_id])
  rental_fees        RentalFee[]
}

model RentalFee {
  fee_id        Int             @id @default(autoincrement())
  agreement_id  Int
  amount        Decimal         @db.Decimal(10, 2)
  status        RentalFeeStatus
  created_date  DateTime        @default(now())
  modified_date DateTime        @updatedAt
  agreement     Agreement       @relation(fields: [agreement_id], references: [agreement_id])
}

model Notification {
  notif_id    Int                @id @default(autoincrement())
  receiver_id Int
  message     String
  status      NotificationStatus
  createdDate DateTime           @default(now())
  user        UserInfo           @relation(fields: [receiver_id], references: [user_id])
}

enum UserRole {
  tenant
  owner
}

enum PropertyStatus {
  active
  inactive
  occupied
  trash
}

enum ProposalStatus {
  pending
  approved
  rejected
  cancelled
}

enum DepositStatus {
  pending
  submitted
  pending_returned
  returned
}

enum InitialFeeStatus {
  pending
  submitted
}

enum AgreementStatus {
  pending
  ongoing
  completed
  expired
}

enum RentalFeeStatus {
  paid
  pending
}

enum NotificationStatus {
  read
  unread
}
